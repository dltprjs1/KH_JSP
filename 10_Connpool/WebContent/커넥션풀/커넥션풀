# JDBC와 DBCP의 차이점
  1) JDBC(Java DataBase Connectivity)
  	- 자바와 데이터베이스 간의 연결
  	- 데이터베이스에 연결하려면 드라이버(driver)를 로딩하고, 커넥션(Connection) 객체를 받아와야 한다.
  	- JDBC 방식을 사용하면 사용자가 요청할 때마다 매번 드라이버를 로딩하고, 데이터베이스에서 커넥션 객체를 생성하여
  	  연결하고 사용 후 종료하기 때문에 매우 비효율적이고 데이터베이스에 부하가 많이 생기는 단점이 발생한다.
  	- 커넥션을 생성하고 사용 후 닫는데 시간이 소요되기 때문에 동시 접속자가 많은 웹 사이트에서는 전체적인 성능이
  	  낮아진다.
  
  2) DBCP(DataBase Connection Pool)
    - 데이터베이스와 Connection을 맺고 있는 객체를 관리하기 위한 방법을 말한다.
    - JDBC의 단점을 극복하기 위해서 사용된다.
    - 웹 컨테이너(톰켓 서버)가 실행되면서 커넥션(Connection) 객체를 미리(Pool)에 만들어 놓았다.
    - 데이터베이스와 연결된 커넥션(Connection)을 미리 생성해서 풀(Pool)속에 저장해 주도 있다가 
      필요할 때마다 가져와 사용하고 반납한다.
    - 미리 생성해 두기 때문에 데이터베이스의 부하를 줄여주고, 유동적으로 연결을 관리할 수 있다.
    - 커넥션 풀을 사용하면 커넥셩을 생성하고 닫는데 필요한 시간이 소모되지 않기 때문에 그만큼 어플리케이션의 실행
      속도가 빨라진다.
    - 또한 한 번에 생성될 수 있는 커넥션 수를 제어하기 때문에 동시 접속자 수가 몰려도 웹 애플리케이션이
      쉽게 다운되지 않는다.
    - 따라서 커넥션 풀을 사용하면 전체적인 웹 어플리케이션의 성능과 처리량이 향상되므로 많은 웹 어플리케이션이
      커넥션 풀을 기본으로 사용하고 있다.
      
  
# JNDI(Java Naming Directory Interface)
  - 커넥션 풀에 접근하려면 JNDI 서비스를 이용해야 한다. JNDI는 서버에서 관리하고 있는 리소스에 대한 
    정보를 알고있는 특정한 리소스를 찾아서 사용할 수 있도록 객체를 반환해 주는 역학을 한다.
  - 디렉토리 서비스에 접근하는데 필요한 API이며, 이 API를 이용하여 서버의 자원을 찾을 수 있다.
  - 자원이라 함은 데이터베이스 서버 등을 의미하는데 이런 다른 시스템과 연결을 제공하는 객체이다.
  - 자원을 서버에 등록할 때에는 고유한 JNDI 이름을 붙여서 사용을 한다.
  - 톰켓 서버에세 이 자원을 관리하는 가상의 디렉토리는 "java:com/env"라는 디렉토리이다.
    해당 디렉토리에 고유한 JNDI 이름을 뒤에 붙여서 해당 자원을 찾게 된다. 찾을 때는 lookup() 이라는 메서드를
    이용하여 자원을 찾게 되고, 찾은 객체의 다입은 Onject 타입이다.
    따라서 형변환이 필요하다.
  

# 커넥션 풀(Connection Pool) 연결 방법
  1) Context 객체를 생성
  2) lookup() 메서드를 이용하여 매칭되는 커넥션을 찾는다.
  3) DataSource.getConnection() 메서드를 이용하여 커넥션을 확보한다.
  

# 커넥션 풀을 사용하기 위해서 필요한 라이브러리
  - commons-connection-3.2.1.jar
  - commons-dbcp-1.4.jar
  - commons-pool-1.6.jar
  
  
   